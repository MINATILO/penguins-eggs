.\" generated with Ronn-NG/v0.8.0
.\" http://github.com/apjanke/ronn-ng/tree/0.8.0
.TH "EGGS" "1" "February 2021" "penguins-eggs.net" "eggs manual"
.SH "NAME"
\fBeggs\fR \- A reproductive system for penguins
.IP "\[ci]" 4
\fI\%#index\fR
.IP "\[ci]" 4
\fI\%#presentation\fR
.IP "\[ci]" 4
\fI\%#packages\fR
.IP "\[ci]" 4
\fI\%#usage\fR
.IP "\[ci]" 4
\fI\%#commands\fR
.IP "\[ci]" 4
\fI\%#terminal\-samples\fR
.IP "\[ci]" 4
\fI\%#thats\-all\-folks\fR
.IP "" 0
.SH "SYNOPSIS"
.nf
$ npm install \-g penguins\-eggs
$ eggs COMMAND
running command\|\.\|\.\|\.
$ eggs (\-v|\-\-version|version)
penguins\-eggs/7\.8\.10 linux\-x64 node\-v14\.15\.4
$ eggs \-\-help [COMMAND]
USAGE
  $ eggs COMMAND
\|\.\|\.\|\.
.fi
.P
Most of the commands of eggs need sudo, but there are exceptions for export, info and mom\.
.P
examples:
.IP "" 4
.nf
sudo eggs init  # initialize eggs, create man pages and autocomplete for eggs
sudo eggs produce # create an ISO of the system
sudo eggs kill # delete the created ISO and clean the nest
.fi
.IP "" 0
.P
There are too, two interactive helpers:
.IP "" 4
.nf
eggs mom # interactive GUI (be kind with mom, she don\'t need sudo)
sudo eggs dad # get help from dad to finalize ISO
.fi
.IP "" 0
.P
Help yorself signing in the forum or in facebook group page or asking me\.
.SH "DESCRIPTION"
eggs is a console utility, in active development, who let you to remaster your system and redistribuite it as iso image\.
.P
The scope of this project is to implement the process of remastering your version of Linux, generate it as ISO image to burn on a CD/DVD or copy to a usb key to boot your system\. You can easily install your live system with gui installer (calamares) or eggs cli installer\.
.SH "COMMANDS"
.IP "\[ci]" 4
\fI\%#eggs\-adapt\fR
.IP "\[ci]" 4
\fI\%#eggs\-autocomplete\-shell\fR
.IP "\[ci]" 4
\fI\%#eggs\-calamares\fR
.IP "\[ci]" 4
\fI\%#eggs\-dad\fR
.IP "\[ci]" 4
\fI\%#eggs\-exportdeb\fR
.IP "\[ci]" 4
\fI\%#eggs\-exportdocs\fR
.IP "\[ci]" 4
\fI\%#eggs\-exportiso\fR
.IP "\[ci]" 4
\fI\%#eggs\-help\-command\fR
.IP "\[ci]" 4
\fI\%#eggs\-info\fR
.IP "\[ci]" 4
\fI\%#eggs\-install\fR
.IP "\[ci]" 4
\fI\%#eggs\-kill\fR
.IP "\[ci]" 4
\fI\%#eggs\-mom\fR
.IP "\[ci]" 4
\fI\%#eggs\-prerequisites\fR
.IP "\[ci]" 4
\fI\%#eggs\-produce\fR
.IP "\[ci]" 4
\fI\%#eggs\-remove\fR
.IP "\[ci]" 4
\fI\%#eggs\-toolsclean\fR
.IP "\[ci]" 4
\fI\%#eggs\-toolsinitrd\fR
.IP "\[ci]" 4
\fI\%#eggs\-toolslocales\fR
.IP "\[ci]" 4
\fI\%#eggs\-toolspve\fR
.IP "\[ci]" 4
\fI\%#eggs\-toolssanitize\fR
.IP "\[ci]" 4
\fI\%#eggs\-toolsskel\fR
.IP "\[ci]" 4
\fI\%#eggs\-toolsyolk\fR
.IP "\[ci]" 4
\fI\%#eggs\-update\fR
.IP "" 0
.SH "`eggs adapt`"
adapt monitor resolution for VM only
.P
``` USAGE $ eggs adapt
.P
OPTIONS \-h, \-\-help show CLI help \-v, \-\-verbose
.P
ALIASES $ eggs adjust ```
.SH "`eggs autocomplete [SHELL]`"
display autocomplete installation instructions
.P
``` USAGE $ eggs autocomplete [SHELL]
.P
ARGUMENTS SHELL shell type
.P
OPTIONS \-r, \-\-refresh\-cache Refresh cache (ignores displaying instructions)
.P
EXAMPLES $ eggs autocomplete $ eggs autocomplete bash $ eggs autocomplete zsh $ eggs autocomplete \-\-refresh\-cache ```
.SH "`eggs calamares`"
calamares or install or configure it
.P
``` USAGE $ eggs calamares
.P
OPTIONS \-f, \-\-final final: remove eggs prerequisites, calamares and all it\'s dependencies \-h, \-\-help show CLI help \-i, \-\-install install calamares and it\'s dependencies \-v, \-\-verbose \-\-theme=theme theme/branding for eggs and calamares
.P
EXAMPLES ~$ sudo eggs calamares create/renew calamares configuration\'s files
.P
~$ sudo eggs calamares \-i install calamares and create it\'s configuration\'s files ```
.SH "`eggs dad`"
ask help from daddy (gui interface)!
.P
``` USAGE $ eggs dad
.P
OPTIONS \-h, \-\-help show CLI help \-v, \-\-verbose ```
.SH "`eggs export:deb`"
export package eggs\-v7\-x\-x\-1\.deb in the destination host
.P
``` USAGE $ eggs export:deb
.P
OPTIONS \-c, \-\-clean remove old \.deb before to copy \-h, \-\-help show CLI help \-\-all export all archs \-\-amd64 export amd64 arch \-\-armel export armel arch \-\-i386 export i386 arch ```
.SH "`eggs export:docs`"
remove and export docType documentation of the sources in the destination host
.P
``` USAGE $ eggs export:docs
.P
OPTIONS \-h, \-\-help show CLI help ```
.SH "`eggs export:iso`"
export iso in the destination host
.P
``` USAGE $ eggs export:iso
.P
OPTIONS \-c, \-\-clean delete old ISOs before to copy \-h, \-\-help show CLI help ```
.SH "`eggs help [COMMAND]`"
display help for eggs
.P
``` USAGE $ eggs help [COMMAND]
.P
ARGUMENTS COMMAND command to show help for
.P
OPTIONS \-\-all see all commands in CLI ```
.SH "`eggs info`"
informations about system and eggs
.P
``` USAGE $ eggs info
.P
EXAMPLE $ eggs info You will find here informations about penguin\'s eggs! ```
.SH "`eggs install`"
eggs installer \- (the egg became penguin)
.P
``` USAGE $ eggs install
.P
OPTIONS \-c, \-\-cli try to use antiX installer (cli) \-g, \-\-gui use Calamares installer (gui) \-h, \-\-info show CLI help \-l, \-\-lvmremove remove lvm /dev/pve \-m, \-\-mx try to use MX installer (gui) \-u, \-\-umount umount devices \-v, \-\-verbose verbose
.P
ALIASES $ eggs hatch
.P
EXAMPLE $ eggs install Install the system with eggs cli installer(default) ```
.SH "`eggs kill`"
kill the eggs/free the nest
.P
``` USAGE $ eggs kill
.P
OPTIONS \-h, \-\-help show CLI help \-v, \-\-verbose verbose
.P
EXAMPLE $ eggs kill kill the eggs/free the nest ```
.SH "`eggs mom`"
ask for mommy (gui interface)!
.P
``` USAGE $ eggs mom
.P
OPTIONS \-h, \-\-help show CLI help ```
.SH "`eggs prerequisites`"
Initialize eggs and install packages prerequisites to run eggs
.P
``` USAGE $ eggs prerequisites
.P
OPTIONS \-h, \-\-help show CLI help \-v, \-\-verbose verbose
.P
ALIASES $ eggs fertilize $ eggs init
.P
EXAMPLE ~$ eggs init Initialize eggs, install prerequisites and create configuration files ```
.SH "`eggs produce`"
the system produce an egg: livecd creation\.
.P
``` USAGE $ eggs produce
.P
OPTIONS \-b, \-\-basename=basename basename \-f, \-\-fast fast compression \-h, \-\-help show CLI help \-m, \-\-max max compression \-n, \-\-normal normal compression \-p, \-\-prefix=prefix prefix \-s, \-\-script script mode\. Generate scripts to manage iso build \-v, \-\-verbose verbose \-y, \-\-yolk \-y force yolk renew \-\-adapt adapt video resolution in VM \-\-final final: remove eggs prerequisites, calamares and all it\'s dependencies \-\-ichoice allows the user to choose the installation type cli/gui \-\-pve administration of virtual machines (Proxmox\-VE) \-\-rsupport remote support via dwagent \-\-theme=theme theme/branding for eggs and calamares
.P
ALIASES $ eggs spawn $ eggs lay
.P
EXAMPLES $ sudo eggs produce produce an ISO called [hostname]\-[arch]\-YYYY\-MM\-DD_HHMM\.iso, compressed xz (standard compression)\. If hostname=ugo and arch=i386 ugo\-x86\-2020\-08\-25_1215\.iso
.P
$ sudo eggs produce \-v the same as the previuos, but with more explicative output
.P
$ sudo eggs produce \-vf the same as the previuos, compression lz4 (fastest but about 30% less compressed than xz)
.P
$ sudo eggs produce \-vm the same as the previuos, compression xz (normal compression xz)
.P
$ sudo eggs produce \-vm the same as the previuos, compression xz \-Xbcj x86 (max compression, about 10% more compressed)
.P
$ sudo eggs produce \-vf \-\-basename leo \-\-theme debian \-\-adapt produce an ISO called leo\-i386\-2020\-08\-25_1215\.iso compression lz4, using Debian theme and link to adapt
.P
$ sudo eggs produce \-v \-\-basename leo \-\-theme debian \-\-adapt produce an ISO called leo\-i386\-2020\-08\-25_1215\.iso compression xz, using Debian theme and link to adapt
.P
$ sudo eggs produce \-v \-\-basename leo \-\-rsupport produce an ISO called leo\-i386\-2020\-08\-25_1215\.iso compression xz, using eggs theme and link to dwagent
.P
$ sudo eggs produce \-vs \-\-basename leo \-\-rsupport produce scripts to build an ISO as the previus example\. Scripts can be found in /home/eggs/ovarium and you can customize all you need ```
.SH "`eggs remove`"
remove eggs, eggs configurations, prerequisites, calamares, calamares configurations
.P
``` USAGE $ eggs remove
.P
OPTIONS \-a, \-\-all remove all \-h, \-\-help show CLI help \-p, \-\-prerequisites remove eggs packages prerequisites \-v, \-\-verbose verbose \-\-purge remove eggs, eggs configuration
.P
EXAMPLES $ sudo eggs remove remove eggs
.P
$ sudo eggs remove \-\-purge remove eggs, eggs configurations
.P
$ sudo eggs remove \-\-prerequisites remove packages prerequisites, calamares, calamares configurations
.P
$ sudo eggs remove \-\-all remove eggs, eggs configurations, prerequisites, calamares, calamares configurations ```
.SH "`eggs tools:clean`"
clean system log, apt, etc
.P
``` USAGE $ eggs tools:clean
.P
OPTIONS \-h, \-\-help show CLI help \-v, \-\-verbose verbose ```
.SH "`eggs tools:initrd`"
Test initrd
.P
``` USAGE $ eggs tools:initrd
.P
OPTIONS \-h, \-\-help show CLI help \-v, \-\-verbose \-\-check=check check if necessary to clean initrd\.img \-\-clean=clean clean the initrd\.img ```
.SH "`eggs tools:locales`"
install/clean locales
.P
``` USAGE $ eggs tools:locales
.P
OPTIONS \-h, \-\-help show CLI help \-r, \-\-reinstall reinstall locales \-v, \-\-verbose verbose ```
.SH "`eggs tools:pve`"
enable/start/stop pve\-live
.P
``` USAGE $ eggs tools:pve
.P
OPTIONS \-d, \-\-disable disable \-e, \-\-enable enable \-h, \-\-help show CLI help \-v, \-\-verbose stop service \-\-start start \-\-stop stop service ```
.SH "`eggs tools:sanitize`"
sanitize
.P
``` USAGE $ eggs tools:sanitize
.P
OPTIONS \-h, \-\-help show CLI help ```
.SH "`eggs tools:skel`"
update skel from home configuration
.P
``` USAGE $ eggs tools:skel
.P
OPTIONS \-h, \-\-help show CLI help \-u, \-\-user=user user to be used \-v, \-\-verbose
.P
EXAMPLE $ eggs skel \-\-user mauro desktop configuration of user mauro will get used as default ```
.SH "`eggs tools:yolk`"
configure eggs to install without internet
.P
``` USAGE $ eggs tools:yolk
.P
OPTIONS \-h, \-\-help show CLI help \-v, \-\-verbose
.P
EXAMPLE $ eggs yolk \-v ```
.SH "`eggs update`"
update the penguin\'s eggs tool\.
.P
``` USAGE $ eggs update
.P
OPTIONS \-a, \-\-apt if eggs package is \.deb, update from distro repositories \-b, \-\-basket if eggs package is \.deb, update from eggs basket \-h, \-\-help show CLI help \-n, \-\-npm if eggs package is \.npm, update from npmjs\.com \-v, \-\-verbose verbose
.P
DESCRIPTION This method always works, both with npm and deb packages\.
.P
EXAMPLE $ eggs update update/upgrade the penguin\'s eggs tool ```
.SH "FILE"
.nf
  /etc/penguins\-eggs\.d
    all eggs configurations are here

  /usr/local/share/penguins\-eggs/exclude\.list
    exclude\.list rsync

  /usr/lib/penguins\-eggs (deb package)
    here eggs is installed
  OR
  /usr/lib/node_modules/penguins\-eggs/ (npm package)
    here eggs is installed
.fi
.SH "TROUBLES"
Different versions of eggs can have differents configurations files\. This can lead to get errors\.
.P
A fast workaround for this trouble can be:
.IP "\[ci]" 4
download eggs
.IP "\[ci]" 4
remove eggs
.IP "\[ci]" 4
remove it\'s configurations
.IP "\[ci]" 4
reinstall new version
.IP "\[ci]" 4
run sudo eggs init
.IP "" 0
.P
Here are the commands to do:
.IP "\[ci]" 4
\fBsudo eggs update\fR # select basket, choose the version and download it but not install!
.IP "\[ci]" 4
\fBsudo apt \-\-purge eggs\fR # remove eggs
.IP "\[ci]" 4
\fBsudo rm /usr/penguins\-eggs/ rf\fR # remove eggs
.IP "\[ci]" 4
\fBsudo rm /etc/penguins\-eggs\.d \-rf\fR # remove eggs configurations files
.IP "\[ci]" 4
\fBsudo dpkg \-i /tmp/eggs_7\.7\.9\-1_amd64\.deb\fR # install eggs from downloaded package
.IP "\[ci]" 4
\fBsudo eggs init\fR # check prerequisites and generate configuration\'s files
.IP "" 0
.SH "BUGS"
Report problems o new ideas in: \fI\%https://github\.com/pieroproietti/penguins\-eggs/issues\fR
.SH "RESOURCES AND DOCUMENTATION"
Consult website to find documentation, forum\. There is a facebook gruop and page too\.
.IP "\[ci]" 4
website: \fBhttps://penguins\-eggs\.net\fR
.IP "\[ci]" 4
gitHub repository: \fBhttps://github\.com/pieroproietti/penguins\-eggs\fR
.IP "" 0
.SH "AUTHOR"
Piero Proietti \fI\%mailto:piero\.proietti@gmail\.com\fR
