"use strict";
import { version, name, author, mail, homepage } from "../../package.json";
import fs from "fs";
import utils from "./utils.js";

class Iso {
  constructor(
    homeDir,
    distroName,
    clientUserFullName,
    clientUserName,
    clientPassword
  ) {
    this.distroRoot = homeDir + `${distroName}`;
    this.fsDir = homeDir + `${distroName}/fs`;
    this.isoDir = homeDir + `${distroName}/iso`;
    this.distroName = distroName;

    this.clientUserFullName = clientUserFullName;
    this.clientUserName = clientUserName;
    this.clientPassword = clientPassword;
    this.clientIpAddress = "127.0.1.1";

    this.kernelVer = utils.kernerlVersion();
    this.netDomainName = utils.netDomainName();
  }

  show() {
    console.log("eggs: iso parameters ");
    console.log(">>> kernelVer: " + this.kernelVer);
    console.log(">>> netDomainName: " + this.netDomainName);
  }

  async create() {
    console.log("==========================================");
    console.log("Incubator iso: create");
    console.log("==========================================");

    if (!fs.existsSync(this.isoDir)) {
      utils.exec(`mkdir -p ${this.isoDir}/live`);
      utils.exec(`mkdir -p ${this.isoDir}/isolinux`);
      utils.exec(`mkdir -p ${this.isoDir}/EFI`);
      utils.exec(`mkdir -p ${this.isoDir}/boot`);
    }
  }

  async erase() {
    console.log("==========================================");
    console.log("Incubator iso: erase");
    console.log("==========================================");
    utils.exec(`rm -rf ${this.isoDir}`);
  }

  async isolinux() {
    let isolinuxbin = "/usr/lib/ISOLINUX/isolinux.bin";
    let vesamenu = "/usr/lib/syslinux/modules/bios/vesamenu.c32";

    utils.exec(
      `rsync -a /usr/lib/syslinux/modules/bios/chain.c32 ${this
        .isoDir}/isolinux/`
    );
    utils.exec(
      `rsync -a /usr/lib/syslinux/modules/bios/ldlinux.c32 ${this
        .isoDir}/isolinux/`
    );
    utils.exec(
      `rsync -a /usr/lib/syslinux/modules/bios/libcom32.c32 ${this
        .isoDir}/isolinux/`
    );
    utils.exec(
      `rsync -a /usr/lib/syslinux/modules/bios/libutil.c32 ${this
        .isoDir}/isolinux/`
    );
    utils.exec(`rsync -a ${isolinuxbin} ${this.isoDir}/isolinux/`);
    utils.exec(`rsync -a ${vesamenu} ${this.isoDir}/isolinux/`);
  }

  async isolinuxCfg() {
    let file = `${this.isoDir}/isolinux/isolinux.cfg`;
    let text = `
# Generated by penguins-eggs
DEFAULT vesamenu.c32
PROMPT 0
TIMEOUT 30
MENU TITLE CD/DVD ${name} ${version} ${utils.date4label()}
MENU TABMSG Press TAB key to edit
MENU BACKGROUND turtle.png

LABEL ${this.distroName}
  MENU LABEL ^${this.distroName}
  kernel /live/vmlinuz
  append boot=live initrd=/live/initrd.img quiet splash

label ${this.distroName} install
  MENU LABEL ^${this.distroName} install
  kernel /live/vmlinuz
  append boot=live initrd=/live/initrd.img quiet splash finstall

label ${this.distroName} safe
  MENU LABEL ^${this.distroName} safe
  kernel /live/vmlinuz
  append boot=live initrd=/live/initrd.img xforcevesa nomodeset quiet splash`;
    utils.bashwrite(file, text);

    let path = utils.path();
    utils.exec(`cp ${path}/src/assets/turtle.png ${this.isoDir}/isolinux`);
  }

  async alive() {
    utils.exec(`cp /vmlinuz ${this.isoDir}/live/`);
    utils.exec(`cp /initrd.img ${this.isoDir}/live/`);
  }

  async squashFs() {
    let option = "-comp xz";
    utils.exec(
      `mksquashfs ${this.fsDir} ${this
        .isoDir}/live/filesystem.squashfs ${option} -noappend`
    );
  }

  async makeIso() {
    let isoHybridOption = "-isohybrid-mbr /usr/lib/ISOLINUX/isohdpfx.bin ";
    //let uefiOption = "";
    //"-eltorito-alt-boot -e boot/grub/efiboot.img -isohybrid-gpt-basdat -no-emul-boot";
    let volid = `"${this.distroName}"`;
    let isoName = `${this.distroRoot}/${this.distroName}`;
    isoName += utils.date4file() + ".iso";

    utils.exec(
      `xorriso -as mkisofs -r -J -joliet-long -l -cache-inodes ${isoHybridOption} -partition_offset 16 -A ${volid} -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table -o ${isoName} ${this
        .isoDir}`
    );
  }
}

export default Iso;
